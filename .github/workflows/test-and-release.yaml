name: Test and Release

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  issues: write
  actions: write

env:
  CI: 1
  FORCE_COLOR: 3

jobs:
  e2e-tests:
    runs-on: ubuntu-22.04

    environment: ci

    timeout-minutes: 30

    outputs:
      image_tag: ${{ steps.stack_outputs.outputs.image_tag }}
      repository_name: ${{ steps.stack_outputs.outputs.repository_name }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Check TypeScript
        run: npx tsc

      - name: Run Unit Tests
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: github-action-nrf-guide-backend
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate Stack ID
        run: |
          RANDOM_STRING=`node -e "const crypto = require('crypto'); process.stdout.write(crypto.randomBytes(Math.ceil(8 * 0.5)).toString('hex').slice(0, 8));"`
          echo "STACK_NAME=nrfg-${RANDOM_STRING}" >> $GITHUB_ENV

      # During e2e test the MQTT bridge will connect to the AWS IoT broker
      - name: Fake nRF Cloud account device
        run: |
          ./cli.sh fake-nrfcloud-account-device

      - name: Deploy test resources stack
        run: |
          npx cdk --app "npx tsx cdk/test-resources.ts" deploy --require-approval never
          MOCK_HTTP_API_ENDPOINT=`aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }}-test | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "apiURL") | .OutputValue' | sed -E 's/\/$//g'`
          ./cli.sh configure thirdParty nrfcloud apiEndpoint ${MOCK_HTTP_API_ENDPOINT}

      - name: Deploy solution stack
        run: npx cdk deploy --require-approval never

      - name: Run End-to-End Tests
        run: |
          npm config set script-shell `which bash`
          npm run test:e2e

      - name: Save stack outputs
        id: stack_outputs
        run: |
          OUTPUTS=`aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[*].Outputs'`
          IMAGE_TAG=`echo $OUTPUTS | jq -r '.[][] | select(.OutputKey == "bridgeImageTag").OutputValue'`
          REPOSITORY_URI=`echo $OUTPUTS | jq -r '.[][] | select(.OutputKey == "bridgeRepositoryURI").OutputValue'`
          REPOSITORY_NAME=`echo "$REPOSITORY_URI" | sed 's/^.*amazonaws\.com\///g'`
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "repository_name=$REPOSITORY_NAME" >> $GITHUB_OUTPUT

      - name: Clean up End-to-End test resources
        if: always()
        run: |
          npx cdk destroy -f
          npx cdk --app 'npx tsx cdk/test-resources.ts' destroy -f
          ./cli.sh fake-nrfcloud-account-device --remove

  release:
    needs:
      - e2e-tests

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/saga'

    environment: ci

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: github-action-nrf-guide-backend
          aws-region: ${{ vars.AWS_REGION }}

      - name: Tag mqtt bridge image version
        id: tag-mqtt-bridge-image-version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          # Remove existing image tag version if any
          aws ecr batch-delete-image --repository-name ${{ needs.e2e-tests.outputs.repository_name }} --image-ids imageTag=latest imageTag=$LATEST_TAG > /dev/null
          MANIFEST=$( aws ecr batch-get-image --repository-name ${{ needs.e2e-tests.outputs.repository_name }} --image-ids imageTag=${{ needs.e2e-tests.outputs.image_tag }} | jq -r --join-output '.images[].imageManifest' )
          aws ecr put-image --repository-name ${{ needs.e2e-tests.outputs.repository_name }} --image-tag latest --image-manifest "$MANIFEST" > /dev/null
          aws ecr put-image --repository-name ${{ needs.e2e-tests.outputs.repository_name }} --image-tag $LATEST_TAG --image-manifest "$MANIFEST" > /dev/null

      - name: Trigger deployment workflow
        if: steps.tag-mqtt-bridge-image-version.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy.yaml
