name: Test and Release

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  issues: write
  actions: write
  packages: write

env:
  CI: 1
  FORCE_COLOR: 3
  JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION: 1
  COAP_SIMULATOR_DOWNLOAD_URL: ${{ secrets.COAP_SIMULATOR_DOWNLOAD_URL }}

jobs:
  e2e-tests:
    runs-on: ubuntu-22.04

    environment: ci

    timeout-minutes: 30

    outputs:
      mqtt_bridge_tag: ${{ steps.mqtt-bridge-container.outputs.tag }}
      coap_simulator_tag: ${{ steps.coap-simulator-container.outputs.tag }}
      openssl_layer_tag: ${{ steps.openssl-layer-container.outputs.tag }}
      ref: ${{ steps.ref.outputs.ref }}

    env:
      REGISTRY: ghcr.io

    steps:
      - uses: actions/checkout@v4

      - name: store checkout out version
        id: ref
        run: echo "ref=${{ github.sha }}" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Compile TypeScript
        run: npx tsc

      - name: Check source code with eslint
        run: npx eslint .

      - name: Check if source code is properly formatted
        run: npx prettier -c ./

      - name: Run Unit Tests
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: github-action-hello-nrfcloud-backend
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate Stack ID
        run: |
          RANDOM_STRING=`node -e "const crypto = require('crypto'); process.stdout.write(crypto.randomBytes(Math.ceil(8 * 0.5)).toString('hex').slice(0, 8));"`
          echo "STACK_NAME=hni-${RANDOM_STRING}" >> $GITHUB_ENV

      # During e2e test the MQTT bridge will connect to the AWS IoT broker
      - name: Fake nRF Cloud account device
        run: |
          ./cli.sh fake-nrfcloud-account-device nordic
          ./cli.sh create-fake-nrfcloud-health-check-device nordic
          ./cli.sh fake-nrfcloud-account-device elite
          ./cli.sh create-fake-nrfcloud-health-check-device elite

      # The health check does not run, but this will test at least that the image can be generated
      - name: Configure CoAP Health Check Simulator Download URL
        run: |
          ./cli.sh configure-coap-health-check simulatorDownloadURL ${{ env.COAP_SIMULATOR_DOWNLOAD_URL }}

      - name: Build MQTT bridge container
        id: mqtt-bridge-container
        run: |
          TAG=$(./cli.sh build-container mqtt-bridge)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "MQTT_BRIDGE_CONTAINER_TAG=${TAG}" >> $GITHUB_ENV

      # Containers are rebuilt for every run, this ensures that they can actually
      # be built. If we were to use a pre-built version here we could run into
      # the risk that they are no longer buildable.

      - name: Build CoAP simulator container
        id: coap-simulator-container
        run: |
          TAG=$(./cli.sh build-container coap-simulator)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "COAP_SIMULATOR_CONTAINER_TAG=${TAG}" >> $GITHUB_ENV

      - name: Build OpenSSL layer container
        id: openssl-layer-container
        run: |
          TAG=$(./cli.sh build-container openssl-layer)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "OPENSSL_LAYER_CONTAINER_TAG=${TAG}" >> $GITHUB_ENV

      - name: Deploy test resources stack
        run: |
          npx cdk --app "npx tsx --no-warnings cdk/test-resources.ts" deploy --require-approval never
          MOCK_HTTP_API_ENDPOINT=`aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }}-test | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "apiURL") | .OutputValue' | sed -E 's/\/$//g'`
          ./cli.sh configure-nrfcloud-account nordic apiEndpoint ${MOCK_HTTP_API_ENDPOINT}
          ./cli.sh configure-nrfcloud-account nordic apiKey apiKey_Nordic
          ./cli.sh configure-nrfcloud-account elite apiEndpoint ${MOCK_HTTP_API_ENDPOINT}
          ./cli.sh configure-nrfcloud-account elite apiKey apiKey_Elite

      - name: Deploy solution stack
        env:
          IS_TEST: 1
        run: npx cdk deploy --all --require-approval never

      - name: Run End-to-End Tests
        run: npm run test:e2e

      - name: Print failed End-to-End tests
        if: failure()
        run:
          cat e2e-test-result.json | npx tsx --no-warnings
          ./feature-runner/console-reporter.ts  --only-failed --with-timestamps

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-result
          path: e2e-test-result.json

      - name: Get logs
        if: failure()
        run: ./cli.sh logs -f ERROR

      - name: Log in to the Container registry
        if: github.ref == 'refs/heads/saga'
        uses: docker/login-action@5139682d94efc37792e6b54386b5b470a68a4737
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: docker image ls

      # The Docker images that were used successfully in this test run are shared
      # on the projects' container registry. The deploy workflow will pull them and
      # use copy them to the product instance's container registry.
      # This ensures that exactly the container that was verified to work is used
      # in production.
      - name: Push Docker images to repository registry
        if: github.ref == 'refs/heads/saga'
        run: |
          docker tag ${{ steps.mqtt-bridge-container.outputs.tag }}:latest ${{ env.REGISTRY }}/${{ github.repository }}/mqtt-bridge:${{ steps.mqtt-bridge-container.outputs.tag }}
          docker tag ${{ steps.coap-simulator-container.outputs.tag }}:latest ${{ env.REGISTRY }}/${{ github.repository }}/coap-simulator:${{ steps.coap-simulator-container.outputs.tag }}
          docker tag ${{ steps.openssl-layer-container.outputs.tag }}:latest ${{ env.REGISTRY }}/${{ github.repository }}/openssl-layer:${{ steps.openssl-layer-container.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/mqtt-bridge:${{ steps.mqtt-bridge-container.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/coap-simulator:${{ steps.coap-simulator-container.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/openssl-layer:${{ steps.openssl-layer-container.outputs.tag }}

      - name: Trigger cleanup workflow
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run cleanup.yaml \
            -F stackName=${{ env.STACK_NAME }} \
            -F mqtt_bridge_tag=${{ steps.mqtt-bridge-container.outputs.tag }} \
            -F coap_simulator_tag=${{ steps.coap-simulator-container.outputs.tag }} \
            -F openssl_layer_tag=${{ steps.openssl-layer-container.outputs.tag }}

  release:
    needs:
      - e2e-tests

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/saga'

    environment: ci

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.e2e-tests.outputs.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Semantic release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Trigger deployment workflow
        if: steps.semantic-release.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run deploy.yaml \
            -F ref=${{ needs.e2e-tests.outputs.ref }} \
            -F mqtt_bridge_tag=${{ needs.e2e-tests.outputs.mqtt_bridge_tag }} \
            -F coap_simulator_tag=${{ needs.e2e-tests.outputs.coap_simulator_tag }} \
            -F openssl_layer_tag=${{ needs.e2e-tests.outputs.openssl_layer_tag }}
